# coding:utf-8
# 向量法：
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime
from pandas import Series, DataFrame
import os
import xlrd

a11 = 0.5090106129646301
a22 = 0.4901407063007355
b11 = -0.001158409402705729
b22 = -0.0007168753072619438
c11 = -0.00042026935261674225
c22 = 0.001078548957593739
x_data = np.arange(0.0, 300.1, 0.1)

file_list_june = os.listdir(r'C:\Python\Python36\test\插入500点')
df = pd.read_excel(r'C:\Python\Python36\test\插入500点\plasma2w.xlsx')  # 读excel文件到df

x = np.arange(0.1, 10, 1)
y = np.arange(1, 100, 10)
x1 = x[0] + y[0]
y_out = []
for i in range(len(y)+1):
    # y(n)
    if i < 9:
        i += 1
        print(i)
        b = float(y[i])
        y[i] = float(x[0])+1+b
        print('i=', i, 'y[i]=', y[i], 'b=', b)
    elif i==1:
        y_out.append(y[i]+x[i]*2)
        print('i=', i, 'y[i]=', y[i], 'x[i]=', x[i], y_out )
print(y_out)

# x = np.array(df.Ip_k_1)
# x = IP_K_1
# def f(n):  # 递归算法
#     if n == 1:
#         # print(1+x[n])
#         return 1 + x[n]
#     elif n == 2:
#         return f(n - 1) + x[n]*2
#     elif n == 3:
#         # print('f(n - 1) + x[n]=',f(n - 1),  x[n])
#         return f(n - 1) + x[n] + x[n - 1]
#         print('game over11')
#     elif n == 4:
#         # print('f(n - 1) + x[n]=',f(n - 1),  x[n])
#         return f(n - 1) + f(n - 2) + x[n - 2],
#         print('game over22')
#     elif n < 150:
#         return f(n - 1) + f(n - 2) + x[n - 2]
#
#     else:
#         print('game over33')
#

#
# y_out = []
# for i in range(len(y)+1):
#     # y(n)
#     if i < 9:
#         i += 1
#         print(i)
#         b = float(y[i])
#         y[i] = float(x[0])+1+b
#         print('i=', i, 'y[i]=', y[i], 'b=', b)
#     elif i==1:
#         y_out.append(y[i]+x[i]*2)
#         print('i=', i, 'y[i]=', y[i], 'x[i]=', x[i], y_out )
# print(y_out)

# print("f1=", f(1), "f2=", f(2), "f3=", f(3),"f4=", f(4), "f14=", f(144))

# np.savetxt("y_out.txt", y_out)
# plt.plot(x_data, a11*IP_K_1+a22*IP_K_2+b11*Vo_k_1+b22*Vo_k_2+c11*Vv_k_1+c22*Vv_k_2, 'y', label='上次算的a1a2拟合')
#
# # plt.plot(x_data, aa1*IP_K_1+aa2*IP_K_2+bb1*Vo_k_1+bb2*Vo_k_2+cc1*Vv_k_1+cc2*Vv_k_2), 'r', label='result')
#
# plt.savefig('1.png',dpi=200)
#     #plt.axis([0,np.pi,5.0])
# plt.legend(loc=1)
# plt.show()
